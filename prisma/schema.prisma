// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SectorType {
  DIGIZIGN
  ZURELABS
  INTERNZITY
  UNIZEEK
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id                String   @id
  name              String
  email             String   @unique
  password          String
  sector            SectorType
  isEmailVerified   Boolean  @default(false)
  emailToken        String?  // for email verification
  emailTokenExpiry  DateTime?
  resetToken        String?   // for password resets
  resetTokenExpiry  DateTime?
  isAdmin           Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tasks             Task[]
}

model Lead {
  id        String      @id @default(uuid())   // Auto-generate UUID for each lead
  name      String
  email     String?     @unique
  phone     String?
  sector    SectorType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  tasks     Task[]      // A lead can have multiple tasks
}

model Task {
  id          String     @id @default(uuid())  // Auto-generate UUID for each task
  title       String
  description String?
  priority    Priority
  dueDate     DateTime?
  status      Status     @default(PENDING)     // Using your existing Status enum
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  userId      String
  user        User       @relation(fields: [userId], references: [id])

  leadId      String
  lead        Lead       @relation(fields: [leadId], references: [id])

  // Admin feedback
  feedback    String?
}




model ZureClient {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  phone       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects    ZureProject[]
  proposals   ZureProposal[]
}

model ZureProject {
  id          String   @id @default(uuid())
  title       String
  description String?
  client      ZureClient @relation(fields: [clientId], references: [id])
  clientId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ProposalStatus {
  SENT
  PENDING
  ACCEPTED
  PAID
  REJECTED
}

model ZureProposal {
  id          String         @id @default(uuid())
  title       String
  description String?
  amount      Float
  proposalstatus      ProposalStatus
  client      ZureClient     @relation(fields: [clientId], references: [id])
  clientId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
// enums
enum ClientStatus {
  NEW_LEAD
  PROPOSAL_SENT
  CONTRACT_SIGNED
}

enum CampaignStatus {
  PLANNED
  CREATIVE_APPROVAL
  LIVE_CAMPAIGN
  COMPLETED
  PAUSED
}

enum CampaignType {
  SEO
  PPC
  SOCIAL_MEDIA
}



model DigiZignClient {
  id          String             @id @default(uuid())
  name        String
  email       String?
  phone       String?
  company     String?
  leadSource  String?
  assignedBDE String?
  status      ClientStatus?
  campaigns   Campaign[]
  activities  DigiZignActivity[] @relation("ClientActivities")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model ClientFeedback {
  id         String     @id @default(uuid())
  campaignId String
  campaign   Campaign   @relation(fields: [campaignId], references: [id])
  rating     Int
  comments   String?
  createdAt  DateTime   @default(now())
}

model Campaign {
  id          String             @id @default(uuid())
  name        String
  type        CampaignType
  budget      Float?
  spend       Float?             @default(0)
  roi         Float?
  engagement  Float?             // clicks/impressions/conversions %
  scope       String?
  startDate   DateTime?
  endDate     DateTime?
  status      CampaignStatus
  deadlines   Json?              // custom deadlines
  clientId    String
  client      DigiZignClient     @relation(fields: [clientId], references: [id])
  feedbacks   ClientFeedback[]
  activities  DigiZignActivity[] @relation("CampaignActivities")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model DigiZignActivity {
  id          String    @id @default(uuid())
  type        String   // "CAMPAIGN_PROGRESS", "CLIENT_UPDATE", "TASK_ASSIGNMENT"
  message     String?
  clientId    String?
  client      DigiZignClient? @relation("ClientActivities", fields: [clientId], references: [id])
  campaignId  String?
  campaign    Campaign?       @relation("CampaignActivities", fields: [campaignId], references: [id])
  createdAt   DateTime  @default(now())
}
